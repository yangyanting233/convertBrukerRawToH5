%% function acqSizes = bruker_getAcqSizes(Acqp)
%   Extract acquisition sizes from Acqp structure. For job acquisition, 
%   these are derived from ACQ_jobs, else they are equal to ACQ_size
%
% Input:
%   Acqp: An acqp struct as generated by the function
%         readBrukerParamFile('path/acqp')
%
% Output:
%   acqSizes: sizes of acquired raw data

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Copyright (c) 2019
% Bruker BioSpin MRI GmbH
% D-76275 Ettlingen, Germany
%
% All Rights Reserved
%
% $Id$
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function acqSizes = bruker_getAcqSizes(Acqp)

    % Determine raw data format
    if ~isfield(Acqp, 'ACQ_jobs')
        % no jobs
        if ~isfield(Acqp, 'ACQ_size')
            error('Either ACQ_size or ACQ_jobs required.');
        end
        acqSizes = Acqp.ACQ_size;
        return;
    end
    
    % job acquisition
    if iscell(Acqp.ACQ_jobs)
        % Starting from PV 360, the job description contains a string
        % for the job name, so ACQ_jobs is a cell array
        % derive scan size from job0
        scanSize = Acqp.ACQ_jobs{1, 1};
        nStoredScans = Acqp.ACQ_jobs{7, 1};
    else
        % Pre-PV 360 job description
        scanSize = Acqp.ACQ_jobs(1, 1);
        nStoredScans = Acqp.ACQ_jobs(8, 1);
    end

    if 0==scanSize
        % Pv6 convention - switch to ACQ_size
        if ~isfield(Acqp, 'ACQ_size')
            error('For zero scan size, ACQ_size is required.');
        end

        acqSizes = Acqp.ACQ_size;
        return;
    end

    % real jobs acquisition
    if ~bruker_requires({Acqp}, {'Acqp','NI','NR','ACQ_dim','ACQ_spatial_size_1'})
        error('Some parameters are missing.');
    end
    
    acqSizes = zeros([1 Acqp.ACQ_dim]);
    acqSizes(1) = scanSize;
    switch Acqp.ACQ_dim
        case 2
            acqSizes(2) = Acqp.ACQ_spatial_size_1;            
        case 3
            acqSizes(2) = Acqp.ACQ_spatial_size_1;
            if ~isfield(Acqp,'ACQ_spatial_size_2')
                error('Parameter ACQ_spatial_size_2 is missing');
            end
            acqSizes(3) = Acqp.ACQ_spatial_size_2;
        otherwise
            error('Unsupported ACQ_dim');
    end
    nExpectedScans = Acqp.NR * Acqp.NI * prod(acqSizes(2:end));
    if nStoredScans ~= nExpectedScans
        % This can happen, e.g., for radial methods, which are not supported.
        error(['Total number of scans (' num2str(nStoredScans) ') is not ' ...
               'compatible with NR, NI and  ACQ_spatial_size parameters ' ...
               '(' num2str(nExpectedScans) ' scans). This can happen with ' ...
               'raw data from radial methods or if you use oversampling, ' ...
               'e.g., for IgFLASH. These methods are currently not supported.']);
    end
end